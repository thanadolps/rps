name: Release Please

on:
  push:
    branches:
      - staging  # Trigger on staging pushes to create release PRs
      - main     # Trigger on main pushes for production deployment

permissions:
  packages: read
  contents: write
  pull-requests: write
  id-token: write

jobs:
  # Deploy to staging when pushing to staging branch
  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply -f k8s/staging/ or docker deploy, etc.

  # Check for release-worthy commits and create PR from staging to main
  create-release-pr:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      
      - name: Check for release-worthy commits
        id: check-commits
        run: |
          # Check if there are commits on staging that aren't on main
          NEW_COMMITS=$(git log main..staging --oneline)
          echo "New commits on staging:"
          echo "$NEW_COMMITS"
          
          # Check if any commits have conventional commit prefixes that warrant a release
          RELEASE_COMMITS=$(echo "$NEW_COMMITS" | grep -E "^[a-f0-9]+ (feat|fix|perf|BREAKING CHANGE)" || true)
          
          if [ -n "$RELEASE_COMMITS" ]; then
            echo "Found release-worthy commits:"
            echo "$RELEASE_COMMITS"
            echo "should_create_pr=true" >> $GITHUB_OUTPUT
          else
            echo "No release-worthy commits found"
            echo "should_create_pr=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release PR from staging to main
        if: steps.check-commits.outputs.should_create_pr == 'true'
        run: |
          # Check if a release PR already exists
          EXISTING_PR=$(gh pr list --base main --head staging --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "Release PR already exists: #$EXISTING_PR"
          else
            # Create PR from staging to main
            gh pr create \
              --base main \
              --head staging \
              --title "chore: release $(date +'%Y-%m-%d')" \
              --body "## Release PR\n\nThis PR contains the following changes ready for production release:\n\n$(git log main..staging --oneline)\n\n**Review and approve this PR to deploy to production.**"
            echo "Created release PR from staging to main"
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}

  # Production deployment when merging to main
  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy web-v2 to production
        run: |
          echo "Deploying web-v2 to production..."
          # Add your production deployment logic here
          # Example: kubectl apply -f k8s/production/ or production deploy script
      
      - name: Deploy webhook to production
        run: |
          echo "Deploying webhook to production..."
          # Add your production deployment logic here

  # Merge main back to staging after production deployment
  merge-back:
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      
      - name: Merge main back to staging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Merge main into staging
          git checkout staging
          git merge main --no-ff -m "chore: merge main back to staging after production release"
          git push origin staging
          
          # If you have a dev branch, merge main into dev as well
          if git show-ref --verify --quiet refs/remotes/origin/dev; then
            git checkout dev
            git merge main --no-ff -m "chore: merge main back to dev after production release"
            git push origin dev
          fi
