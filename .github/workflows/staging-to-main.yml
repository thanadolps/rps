name: Manage staging to main PR

on:
  workflow_dispatch:
  push:
    branches:
      - staging

permissions:
  packages: read
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: staging-to-main
  cancel-in-progress: true

env:
  PR_BRANCH: merge-staging-to-main

jobs:
  skip-merge-back:
    runs-on: ubuntu-latest
    outputs:
      skip-workflow: ${{ steps.check-merge-back.outputs.skip-workflow }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Check if this is a merge-back commit
        id: check-merge-back
        run: |
          # Get the latest commit message
          commit_message=$(git log -1 --pretty=format:"%s")
          echo "Latest commit message: $commit_message"

          # Check if this is a merge-back from main to staging
          if echo "$commit_message" | grep -q "Merge main back to staging"; then
            echo "This is a merge-back commit from main to staging."
            
            # Check if there's an existing PR that needs updating
            echo "Checking for existing 'Merge staging to main' PR on branch: $PR_BRANCH"
            existing_pr=$(gh pr list --base main --head "$PR_BRANCH" --state open --json number --jq '.[0].number' || echo "")
            
            if [ -n "$existing_pr" ] && [ "$existing_pr" != "null" ]; then
              echo "Found existing PR #$existing_pr. Will update it with latest changes."
              echo "skip-workflow=false" >> $GITHUB_OUTPUT
            else
              echo "No existing PR found. Skipping workflow to avoid unnecessary PR creation."
              echo "skip-workflow=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "This is a regular commit. Proceeding with workflow."
            echo "skip-workflow=false" >> $GITHUB_OUTPUT
          fi

  extract-release-info:
    runs-on: ubuntu-latest
    needs: skip-merge-back
    if: needs.skip-merge-back.outputs.skip-workflow == 'false'
    outputs:
      pr-body: ${{ steps.extract.outputs.pr-body }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install release-please CLI
        run: npm install -g release-please
      - name: Extract release information using dry-run
        id: extract
        run: |
          # Use release-please in dry-run mode to extract what would be released
          echo "Extracting release information..."
          release_output=$(release-please release-pr \
            --token="${{ secrets.TOKEN }}" \
            --repo-url="${{ github.repository }}" \
            --target-branch=staging \
            --config-file=.github/release-please/config.json \
            --manifest-file=.github/release-please/manifest.json \
            --dry-run \
            --debug 2>&1 || true)
          echo "$release_output"

          # Extract PR body section from dry-run output
          pr_body="$(echo "$release_output" | awk '/^body:/ {found=1; sub(/^body:[[:space:]]*/, ""); print; next} /^updates/ || /^‚ùØ/ {found=0} found')"

          # Use GitHub Actions multiline output format
          {
            echo 'pr-body<<EOF'
            echo "$pr_body"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  upsert-merge-to-main-pr:
    needs: extract-release-info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main (base) branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Reset to staging (head) branch
        run: |
          git fetch origin staging:staging
          git reset --hard staging
      # - name: Setup GitHub App token
      #   id: app-token
      #   uses: actions/create-github-app-token@v1
      #   with:
      #     app-id: "${{ secrets.GH_BOT_V2_APP_ID }}"
      #     private-key: "${{ secrets.GH_BOT_V2_PRIVATE_KEY }}"
      - name: Create/Update Merge to Main PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TOKEN }}
          branch: ${{ env.PR_BRANCH }}
          title: "üöÄ Merge staging to main"
          body: ${{ needs.extract-release-info.outputs.pr-body }}
          labels: automated
