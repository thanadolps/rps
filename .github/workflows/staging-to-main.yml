name: Manage staging to main PR

on:
  workflow_dispatch:
  push:
    branches:
      - staging

permissions:
  packages: read
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: staging-to-main
  cancel-in-progress: true

env:
  PR_BRANCH: merge-staging-to-main

jobs:
  skip-merge-back:
    runs-on: ubuntu-latest
    outputs:
      skip-workflow: ${{ steps.check-condition.outputs.skip-workflow }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Check if PR needs to be updated
        id: check-condition
        run: |
          # Get the latest commit message
          commit_message=$(git log -1 --pretty=format:"%s")
          echo "Latest commit message: $commit_message"

          # Check if this is a merge-back from main to staging
          if echo "$commit_message" | grep -q "Merge main back to staging"; then
            echo "This is a merge-back commit from main to staging."
            
            # Check if there's an existing PR that needs updating
            echo "Checking for existing 'Merge staging to main' PR on branch: $PR_BRANCH"
            existing_pr=$(gh pr list --base main --head "$PR_BRANCH" --state open --json number --jq '.[0].number' || echo "")
            
            if [ -n "$existing_pr" ] && [ "$existing_pr" != "null" ]; then
              echo "Found existing PR #$existing_pr. Will update it with latest changes."
              echo "skip-workflow=false" >> $GITHUB_OUTPUT
            else
              echo "No existing PR found. Skipping workflow to avoid unnecessary PR creation."
              echo "skip-workflow=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "This is a regular commit. Proceeding with workflow."
            echo "skip-workflow=false" >> $GITHUB_OUTPUT
          fi

  extract-release-info:
    runs-on: ubuntu-latest
    needs: skip-merge-back
    if: needs.skip-merge-back.outputs.skip-workflow == 'false'
    outputs:
      pr-body: ${{ steps.extract.outputs.pr-body }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install release-please CLI
        run: npm install -g release-please
      - name: Extract release information using dry-run
        id: extract
        run: |
          # Use release-please in dry-run mode to extract what would be released
          echo "Extracting release information..."
          release_output=$(release-please release-pr \
            --token="${{ secrets.GITHUB_TOKEN }}" \
            --repo-url="${{ github.repository }}" \
            --target-branch=staging \
            --config-file=.github/release-please/config.json \
            --manifest-file=.github/release-please/manifest.json \
            --dry-run \
            --debug 2>&1 || true)
          echo "$release_output"

          # Extract PR body section from dry-run output
          pr_body_raw="$(echo "$release_output" | awk '/^body:/ {found=1; sub(/^body:[[:space:]]*/, ""); print; next} /^updates/ || /^‚ùØ/ {found=0} found')"

          # Remove first and last lines, then add "Changelog Preview" as first line
          pr_body=$(echo "$pr_body_raw" | sed '1d;$d' | sed '1i\Changelog Preview')

          # Use GitHub Actions multiline output format
          {
            echo 'pr-body<<EOF'
            echo "$pr_body"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  upsert-merge-to-main-pr:
    needs: [skip-merge-back, extract-release-info]
    if: needs.skip-merge-back.outputs.skip-workflow == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main (base) branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Reset to staging (head) branch
        run: |
          git fetch origin staging:staging
          git reset --hard staging
      - name: Setup GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: "${{ secrets.GH_BOT_V2_APP_ID }}"
          private-key: "${{ secrets.GH_BOT_V2_PRIVATE_KEY }}"
      - name: Authenticate GitHub CLI
        run: echo "${{ steps.app-token.outputs.token }}" | gh auth login --with-token
      - name: Create/Update Merge to Main PR
        run: |
          # Set up variables
          PR_TITLE="üöÄ Merge staging to main"
          PR_BODY="${{ needs.extract-release-info.outputs.pr-body }}"
          REPO_OWNER="$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)"
          REPO_NAME="$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)"
          
          # Create and switch to the PR branch
          echo "Setting up PR branch: $PR_BRANCH"
          git checkout -B "$PR_BRANCH"
          git push origin "$PR_BRANCH" --force
          
          # Try to create the PR first (following peter-evans/create-pull-request approach)
          echo "Attempting to create new PR..."
          
          # Prepare JSON payload for PR creation
          PR_PAYLOAD=$(jq -n \
            --arg title "$PR_TITLE" \
            --arg body "$PR_BODY" \
            --arg head "$PR_BRANCH" \
            --arg base "main" \
            '{
              "title": $title,
              "body": $body,
              "head": $head,
              "base": $base,
              "maintainer_can_modify": true
            }')
          
          # Attempt to create PR using GitHub REST API
          CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls" \
            -d "$PR_PAYLOAD")
          
          HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "201" ]; then
            # PR created successfully
            PR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r '.number')
            PR_URL=$(echo "$RESPONSE_BODY" | jq -r '.html_url')
            echo "‚úÖ Created new PR #$PR_NUMBER: $PR_URL"
            echo "This should trigger the pull_request workflow."
          elif [ "$HTTP_CODE" = "422" ] && echo "$RESPONSE_BODY" | grep -q "A pull request already exists"; then
            # PR already exists, update it using GitHub REST API
            echo "PR already exists, fetching existing PR..."
            
            # Get existing PR number
            EXISTING_PR_RESPONSE=$(curl -s \
              -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls?state=open&head=$REPO_OWNER:$PR_BRANCH&base=main")
            
            PR_NUMBER=$(echo "$EXISTING_PR_RESPONSE" | jq -r '.[0].number')
            
            if [ "$PR_NUMBER" != "null" ] && [ -n "$PR_NUMBER" ]; then
              echo "Updating existing PR #$PR_NUMBER using GitHub REST API..."
              
              # Update PR using GitHub REST API (this should trigger synchronize events)
              UPDATE_PAYLOAD=$(jq -n \
                --arg title "$PR_TITLE" \
                --arg body "$PR_BODY" \
                '{
                  "title": $title,
                  "body": $body
                }')
              
              UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
                -X PATCH \
                -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER" \
                -d "$UPDATE_PAYLOAD")
              
              UPDATE_HTTP_CODE=$(echo "$UPDATE_RESPONSE" | tail -n1)
              UPDATE_RESPONSE_BODY=$(echo "$UPDATE_RESPONSE" | head -n -1)
              
              if [ "$UPDATE_HTTP_CODE" = "200" ]; then
                PR_URL=$(echo "$UPDATE_RESPONSE_BODY" | jq -r '.html_url')
                echo "‚úÖ Updated existing PR #$PR_NUMBER: $PR_URL"
                echo "This should trigger the pull_request synchronize event."
              else
                echo "‚ùå Failed to update PR. HTTP Code: $UPDATE_HTTP_CODE"
                echo "Response: $UPDATE_RESPONSE_BODY"
                exit 1
              fi
            else
              echo "‚ùå Could not find existing PR number"
              exit 1
            fi
          else
            # Unexpected error
            echo "‚ùå Failed to create PR. HTTP Code: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
